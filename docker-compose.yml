version: '3.8'
services:
  bot:
    build: .
    restart: unless-stopped
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DB_USER=${DB_USER:-quizbot}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME:-quizbot_prod}
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - ADMIN_IDS=${ADMIN_IDS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - quiz_network
      
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-quizbot}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME:-quizbot_prod}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./backups:/backups  # Mount backup directory
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-quizbot}"]
      interval: 30s  # Less aggressive interval for production
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - quiz_network
      
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s  # Less aggressive interval
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - quiz_network
      
  # Optional backup service (uncomment for production)
  # backup:
  #   image: postgres:15-alpine
  #   restart: "no"
  #   environment:
  #     - PGPASSWORD=${DB_PASS}
  #   volumes:
  #     - ./backups:/backups
  #   command: |
  #     sh -c "
  #     while true; do
  #       pg_dump -h postgres -U ${DB_USER:-quizbot} ${DB_NAME:-quizbot_prod} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
  #       find /backups -name '*.sql' -mtime +7 -delete
  #       sleep 86400
  #     done"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - quiz_network

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  quiz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
